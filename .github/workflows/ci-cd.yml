name: CI/CD Pipeline

on:
  push:
    branches:
      - prod
      - stage
      - dev
      - 'feature/*'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Delete node_modules and package-lock.json
      run: |
        cd frontend
        rm -rf node_modules package-lock.json

    - name: Install dependencies and run tests (frontend)
      run: |
        cd frontend
        npm install
        npm test -- --watchAll=false

    - name: Build and tag Docker images (frontend)
      run: |
        cd frontend
        docker build -t group-3-frontend-netflix-clone:latest .
        docker tag group-3-frontend-netflix-clone:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/group-3-frontend-netflix-clone:latest

    - name: Login to AWS ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push Docker images to ECR (frontend)
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/group-3-frontend-netflix-clone:latest

  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to ECS (Dev)
      run: |
        cd frontend/infrastructure/dev
        terraform init
        terraform apply -auto-approve -var="docker_image_tag=latest" -var="docker_image_repo_frontend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/group-3-frontend-netflix-clone"

  deploy-stage:
    if: github.ref == 'refs/heads/stage'
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to ECS (Stage)
      run: |
        cd frontend/infrastructure/stage
        terraform init
        terraform apply -auto-approve -var="docker_image_tag=latest" -var="docker_image_repo_frontend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/group-3-frontend-netflix-clone"

  deploy-prod:
    if: github.ref == 'refs/heads/prod'
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to ECS (Prod)
      run: |
        cd frontend/infrastructure/prod
        terraform init
        terraform apply -auto-approve -var="docker_image_tag=latest" -var="docker_image_repo_frontend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/group-3-frontend-netflix-clone"
