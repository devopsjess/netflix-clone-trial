name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
      - feature/*
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Create ECR repository if it does not exist
      run: |
        aws ecr describe-repositories --repository-names group-3-ecr-netflix-clone --region ${{ secrets.AWS_REGION }} || aws ecr create-repository --repository-name group-3-ecr-netflix-clone --region ${{ secrets.AWS_REGION }}

    - name: List backend directory contents
      run: ls -R backend

    - name: Build Docker image
      run: |
        docker build -t netflix-clone:latest -f backend/Dockerfile backend

    - name: Tag Docker image
      run: |
        docker tag netflix-clone:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/group-3-ecr-netflix-clone:latest

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/group-3-ecr-netflix-clone:latest

    - name: Terraform Init and Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        TF_VAR_tmdb_api_key: ${{ secrets.TMDB_API_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      run: |
        cd terraform
        terraform init
        terraform apply -auto-approve

    - name: Deploy to Kubernetes
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      run: |
        kubectl apply -f kubernetes/deployment.yml
        kubectl apply -f kubernetes/service.yml
