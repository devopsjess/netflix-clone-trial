name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - dev
      - stage
      - prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ce5-group-3-ecrrepository-${{ github.ref_name }}-netflixclone || \
        aws ecr create-repository --repository-name ce5-group-3-ecrrepository-${{ github.ref_name }}-netflixclone
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Build and push Docker image
      id: build-image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ce5-group-3-ecrrepository-${{ github.ref_name }}-netflixclone:latest

    - name: Terraform Init and Apply
      if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/prod'
      id: terraform
      run: |
        cd terraform
        terraform init
        terraform apply -auto-approve -var branch_name=${{ github.ref_name }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_tmdb_api_key: ${{ secrets.TMDB_API_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

    - name: Export Terraform Outputs
      run: |
        echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
        echo "kubeconfig=$(terraform output -raw kubeconfig)" >> $GITHUB_ENV
        echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
        echo "subnet_ids=$(terraform output -json subnet_ids | jq -r '.[]')" >> $GITHUB_ENV
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Tag Subnets for Load Balancer
      run: |
        for subnet in ${{ env.subnet_ids }}; do
          aws ec2 create-tags --resources $subnet --tags Key=kubernetes.io/cluster/${{ env.cluster_name }},Value=shared
          aws ec2 create-tags --resources $subnet --tags Key=kubernetes.io/role/elb,Value=1
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Generate kubeconfig
      if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/prod'
      run: |
        aws eks update-kubeconfig --name ${{ env.cluster_name }} --region ${{ secrets.AWS_REGION }} --kubeconfig /home/runner/.kube/config
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Configure AWS credentials for kubectl
      if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/prod'
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy to Kubernetes
      if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/prod'
      run: |
        kubectl apply -f kubernetes/deployment.yml --validate=false
        kubectl apply -f kubernetes/service.yml --validate=false
      env:
        KUBECONFIG: /home/runner/.kube/config
