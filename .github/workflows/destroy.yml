name: Destroy AWS Resources

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name to destroy resources for'
        required: true
        default: 'dev'

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      continue-on-error: true

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      continue-on-error: true

    - name: Destroy Terraform managed infrastructure
      run: |
        cd terraform
        terraform init
        terraform destroy -auto-approve -var branch_name=${{ github.event.inputs.branch }} -var aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_tmdb_api_key: ${{ secrets.TMDB_API_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      continue-on-error: true

    - name: Delete EKS Clusters
      run: |
        CLUSTER_NAMES=$(aws eks list-clusters --query "clusters[?contains(@, 'ce5-group-3-ekscluster-${{ github.event.inputs.branch }}-netflixclone')]" --output text)
        for cluster in $CLUSTER_NAMES; do
          aws eks delete-cluster --name $cluster || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      continue-on-error: true

    - name: Delete ECS Clusters
      run: |
        CLUSTER_NAMES=$(aws ecs list-clusters --query "clusterArns[?contains(@, 'ce5-group-3-ecs-cluster-${{ github.event.inputs.branch }}-netflixclone')]" --output text)
        for cluster in $CLUSTER_NAMES; do
          SERVICES=$(aws ecs list-services --cluster $cluster --query "serviceArns" --output text)
          for service in $SERVICES; do
            aws ecs delete-service --cluster $cluster --service $service --force || true
          done
          TASKS=$(aws ecs list-tasks --cluster $cluster --query "taskArns" --output text)
          for task in $TASKS; do
            aws ecs stop-task --cluster $cluster --task $task || true
          done
          aws ecs delete-cluster --cluster $cluster || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      continue-on-error: true

    - name: Delete ECS Task Definitions
      run: |
        TASK_DEFINITIONS=$(aws ecs list-task-definitions --query "taskDefinitionArns[?contains(@, 'group-3-ecs-task-netflix-clone-${{ github.event.inputs.branch }}')]" --output text)
        for task_def in $TASK_DEFINITIONS; do
          aws ecs deregister-task-definition --task-definition $task_def || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      continue-on-error: true

    - name: Delete ECR Repositories
      run: |
        aws ecr delete-repository --repository-name ce5-group-3-ecrrepository-${{ github.event.inputs.branch }}-netflixclone --force || true
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets
