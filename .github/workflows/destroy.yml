name: Destroy AWS Resources

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Terraform Init and Destroy
      run: |
        cd terraform
        terraform init
        terraform destroy -auto-approve -var branch_name=${{ github.ref_name }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_tmdb_api_key: ${{ secrets.TMDB_API_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

    - name: Delete ECS Clusters
      run: |
        CLUSTER_NAMES=$(aws ecs list-clusters --query "clusterArns[?contains(@, 'group-3-ecs-cluster-netflix-clone-dev')]" --output text)
        for CLUSTER in $CLUSTER_NAMES; do
          aws ecs delete-cluster --cluster $CLUSTER
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete EKS Clusters
      run: |
        CLUSTER_NAMES=$(aws eks list-clusters --query "clusters[?contains(@, 'group-3-eks-netflix-clone-dev')]" --output text)
        for CLUSTER in $CLUSTER_NAMES; do
          aws eks delete-cluster --name $CLUSTER
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete VPCs
      run: |
        VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=group-3-vpc-netflix-clone-dev-*" --query "Vpcs[].VpcId" --output text)
        for VPC_ID in $VPC_IDS; do
          echo "Deleting dependencies for VPC: $VPC_ID"
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[].SubnetId" --output text)
          for SUBNET_ID in $SUBNET_IDS; do
            aws ec2 delete-subnet --subnet-id $SUBNET_ID
          done
          ROUTE_TABLE_IDS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query "RouteTables[].RouteTableId" --output text)
          for ROUTE_TABLE_ID in $ROUTE_TABLE_IDS; do
            aws ec2 delete-route-table --route-table-id $ROUTE_TABLE_ID
          done
          SECURITY_GROUP_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[?GroupName!='default'].GroupId" --output text)
          for SECURITY_GROUP_ID in $SECURITY_GROUP_IDS; do
            aws ec2 delete-security-group --group-id $SECURITY_GROUP_ID
          done
          aws ec2 delete-vpc --vpc-id $VPC_ID
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
