name: Destroy Resources

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name (dev, stage, prod)'
        required: true
        default: 'dev'

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Destroy Terraform resources
      run: |
        cd terraform
        terraform destroy -auto-approve -var branch_name=${{ github.event.inputs.branch_name }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_tmdb_api_key: ${{ secrets.TMDB_API_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

    - name: Delete EKS Cluster
      run: |
        CLUSTER_NAME="group-3-eks-netflix-clone-${{ github.event.inputs.branch_name }}-*"
        if aws eks describe-cluster --name ${CLUSTER_NAME}; then
          aws eks delete-cluster --name ${CLUSTER_NAME}
        fi
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECR Repository
      run: |
        REPO_NAME="group-3-ecr-netflix-clone-${{ github.event.inputs.branch_name }}-*"
        if aws ecr describe-repositories --repository-names ${REPO_NAME}; then
          aws ecr delete-repository --repository-name ${REPO_NAME} --force
        fi
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECS Cluster and Task Definitions
      run: |
        CLUSTER_NAME="group-3-ecs-cluster-netflix-clone-${{ github.event.inputs.branch_name }}-*"
        SERVICE_NAME="group-3-ecs-service-netflix-clone-${{ github.event.inputs.branch_name }}-*"
        if aws ecs describe-clusters --clusters ${CLUSTER_NAME}; then
          aws ecs delete-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --force
          aws ecs delete-cluster --cluster ${CLUSTER_NAME}
        fi
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Detach and Delete Internet Gateways
      run: |
        VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=group-3-vpc-netflix-clone-${{ github.event.inputs.branch_name }}-*" --query "Vpcs[].VpcId" --output text)
        for VPC_ID in ${VPC_IDS}; do
          IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=${VPC_ID}" --query "InternetGateways[].InternetGatewayId" --output text)
          for IGW_ID in ${IGW_IDS}; do
            aws ec2 detach-internet-gateway --internet-gateway-id ${IGW_ID} --vpc-id ${VPC_ID}
            aws ec2 delete-internet-gateway --internet-gateway-id ${IGW_ID}
          done
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete Subnets, Route Tables, and VPCs
      run: |
        VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=group-3-vpc-netflix-clone-${{ github.event.inputs.branch_name }}-*" --query "Vpcs[].VpcId" --output text)
        for VPC_ID in ${VPC_IDS}; do
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=${VPC_ID}" --query "Subnets[].SubnetId" --output text)
          for SUBNET_ID in ${SUBNET_IDS}; do
            aws ec2 delete-subnet --subnet-id ${SUBNET_ID}
          done

          ROUTE_TABLE_IDS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=${VPC_ID}" --query "RouteTables[].RouteTableId" --output text)
          for RT_ID in ${ROUTE_TABLE_IDS}; do
            aws ec2 delete-route-table --route-table-id ${RT_ID}
          done

          aws ec2 delete-vpc --vpc-id ${VPC_ID}
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
