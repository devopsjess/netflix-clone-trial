name: Destroy AWS Resources

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Initialize Terraform
      run: |
        cd terraform
        terraform init

    - name: Destroy Terraform-managed infrastructure
      run: |
        cd terraform
        terraform destroy -auto-approve -var branch_name=dev
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_tmdb_api_key: ${{ secrets.TMDB_API_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

    - name: List ECS Clusters
      id: list-ecs-clusters
      run: |
        aws ecs list-clusters --query "clusterArns[?contains(@, 'group-3-ecs-cluster-netflix-clone-dev')]" --output text
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Stop ECS Services and Tasks
      run: |
        for CLUSTER in $(aws ecs list-clusters --query "clusterArns[?contains(@, 'group-3-ecs-cluster-netflix-clone-dev')]" --output text); do
          SERVICE_ARNS=$(aws ecs list-services --cluster $CLUSTER --query "serviceArns" --output text)
          for SERVICE in $SERVICE_ARNS; do
            aws ecs update-service --cluster $CLUSTER --service $SERVICE --desired-count 0
            aws ecs delete-service --cluster $CLUSTER --service $SERVICE
          done
          TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER --query "taskArns" --output text)
          for TASK in $TASK_ARNS; do
            aws ecs stop-task --cluster $CLUSTER --task $TASK
          done
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECS Clusters
      run: |
        for CLUSTER in $(aws ecs list-clusters --query "clusterArns[?contains(@, 'group-3-ecs-cluster-netflix-clone-dev')]" --output text); do
          aws ecs delete-cluster --cluster $CLUSTER
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECR Repositories
      run: |
        for REPO in $(aws ecr describe-repositories --query "repositories[?starts_with(repositoryName, 'group-3-ecr-netflix-clone-dev')].repositoryName" --output text); do
          aws ecr delete-repository --repository-name $REPO --force
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete VPCs
      run: |
        VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=group-3-vpc-netflix-clone-dev-*" --query "Vpcs[].VpcId" --output text)
        for VPC_ID in $VPC_IDS; do
          # Delete dependent resources
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[].SubnetId" --output text)
          for SUBNET_ID in $SUBNET_IDS; do
            aws ec2 delete-subnet --subnet-id $SUBNET_ID
          done

          RTB_IDS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query "RouteTables[].RouteTableId" --output text)
          for RTB_ID in $RTB_IDS; do
            aws ec2 delete-route-table --route-table-id $RTB_ID
          done

          SG_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[].GroupId" --output text)
          for SG_ID in $SG_IDS; do
            aws ec2 delete-security-group --group-id $SG_ID
          done

          # Finally, delete the VPC
          aws ec2 delete-vpc --vpc-id $VPC_ID
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
