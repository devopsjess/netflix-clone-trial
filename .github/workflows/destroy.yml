name: Destroy AWS Resources

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name to destroy resources for'
        required: true
        default: 'dev'

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Destroy Terraform managed infrastructure
      run: |
        cd terraform
        terraform init
        terraform destroy -auto-approve -var branch_name=${{ github.event.inputs.branch }} -var aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_tmdb_api_key: ${{ secrets.TMDB_API_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

    - name: Delete EKS Clusters
      run: |
        CLUSTER_NAMES=$(aws eks list-clusters --query "clusters[?contains(@, 'ce5-group-3-ekscluster-${{ github.event.inputs.branch }}-netflixclone')]" --output text)
        for cluster in $CLUSTER_NAMES; do
          aws eks delete-cluster --name $cluster || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECS Clusters
      run: |
        CLUSTER_NAMES=$(aws ecs list-clusters --query "clusterArns[?contains(@, 'ce5-group-3-ecs-cluster-${{ github.event.inputs.branch }}-netflixclone')]" --output text)
        for cluster in $CLUSTER_NAMES; do
          SERVICES=$(aws ecs list-services --cluster $cluster --query "serviceArns" --output text)
          for service in $SERVICES; do
            aws ecs delete-service --cluster $cluster --service $service --force || true
          done
          TASKS=$(aws ecs list-tasks --cluster $cluster --query "taskArns" --output text)
          for task in $TASKS; do
            aws ecs stop-task --cluster $cluster --task $task || true
          done
          aws ecs delete-cluster --cluster $cluster || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECS Task Definitions
      run: |
        TASK_DEFINITIONS=$(aws ecs list-task-definitions --query "taskDefinitionArns[?contains(@, 'group-3-ecs-task-netflix-clone-${{ github.event.inputs.branch }}')]" --output text)
        for task_def in $TASK_DEFINITIONS; do
          aws ecs deregister-task-definition --task-definition $task_def || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECR Repositories
      run: |
        aws ecr delete-repository --repository-name ce5-group-3-ecrrepository-${{ github.event.inputs.branch }}-netflixclone --force || true
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete IAM Roles
      run: |
        IAM_ROLES=(
          ce5-group-3-eks-cluster-role-${{ github.event.inputs.branch }}-netflixclone
          ce5-group-3-ecs-task-execution-role-${{ github.event.inputs.branch }}-netflixclone
        )
        for role in "${IAM_ROLES[@]}"; do
          ATTACHED_POLICIES=$(aws iam list-attached-role-policies --role-name $role --query 'AttachedPolicies[].PolicyArn' --output text)
          for policy in $ATTACHED_POLICIES; do
            aws iam detach-role-policy --role-name $role --policy-arn $policy || true
          done
          aws iam delete-role --role-name $role || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete VPCs
      run: |
        VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=ce5-group-3-vpc-${{ github.event.inputs.branch }}-netflixclone" --query "Vpcs[].VpcId" --output text)
        for vpc in $VPC_IDS; do
          aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$vpc" --query "RouteTables[].RouteTableId" --output text | xargs -I {} aws ec2 delete-route-table --route-table-id {} || true
          aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --query "InternetGateways[].InternetGatewayId" --output text | xargs -I {} aws ec2 detach-internet-gateway --internet-gateway-id {} --vpc-id $vpc || true
          aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --query "InternetGateways[].InternetGatewayId" --output text | xargs -I {} aws ec2 delete-internet-gateway --internet-gateway-id {} || true
          aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$vpc" --query "SecurityGroups[].GroupId" --output text | xargs -I {} aws ec2 delete-security-group --group-id {} || true
          aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc" --query "Subnets[].SubnetId" --output text | xargs -I {} aws ec2 delete-subnet --subnet-id {} || true
          aws ec2 delete-vpc --vpc-id $vpc || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
