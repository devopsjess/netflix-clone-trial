name: Destroy AWS Resources

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to destroy resources for'
        required: true
        default: 'dev'

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Destroy EKS Cluster
      run: |
        aws eks delete-cluster --name group-3-eks-netflix-clone-${{ github.event.inputs.branch }}

    - name: Delete ECR Repository
      run: |
        aws ecr describe-repositories --query "repositories[?repositoryName=='group-3-ecr-netflix-clone-${{ github.event.inputs.branch }}-*'].repositoryName" --output text | xargs -I {} aws ecr delete-repository --repository-name {} --force

    - name: Destroy Terraform Resources
      run: |
        cd terraform
        terraform init
        terraform destroy -auto-approve -var branch_name=${{ github.event.inputs.branch }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_tmdb_api_key: ${{ secrets.TMDB_API_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

    - name: Delete VPCs
      run: |
        VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=group-3-vpc-netflix-clone-${{ github.event.inputs.branch }}-*" --query "Vpcs[].VpcId" --output text)
        for VPC_ID in $VPC_IDS; do
          echo "Deleting VPC: $VPC_ID"
          aws ec2 delete-vpc --vpc-id $VPC_ID
        done

    - name: Delete Subnets
      run: |
        SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=group-3-subnet-netflix-clone-${{ github.event.inputs.branch }}-*" --query "Subnets[].SubnetId" --output text)
        for SUBNET_ID in $SUBNET_IDS; do
          echo "Deleting Subnet: $SUBNET_ID"
          aws ec2 delete-subnet --subnet-id $SUBNET_ID
        done

    - name: Delete Internet Gateways
      run: |
        IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=tag:Name,Values=group-3-igw-netflix-clone-${{ github.event.inputs.branch }}-*" --query "InternetGateways[].InternetGatewayId" --output text)
        for IGW_ID in $IGW_IDS; do
          echo "Deleting Internet Gateway: $IGW_ID"
          aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID
        done

    - name: Delete ECS Cluster
      run: |
        aws ecs delete-cluster --cluster group-3-ecs-cluster-netflix-clone-${{ github.event.inputs.branch }}

    - name: Delete ECS Task Definitions
      run: |
        TASK_DEFINITIONS=$(aws ecs list-task-definitions --query "taskDefinitionArns[?contains(@, 'group-3-ecs-task-netflix-clone-${{ github.event.inputs.branch }}')]" --output text)
        for TASK_DEFINITION in $TASK_DEFINITIONS; do
          echo "Deregistering Task Definition: $TASK_DEFINITION"
          aws ecs deregister-task-definition --task-definition $TASK_DEFINITION
        done
