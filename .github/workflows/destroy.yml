name: Destroy AWS Resources

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      run: terraform init
      working-directory: terraform

    - name: Destroy Terraform Managed Resources
      run: |
        terraform destroy -auto-approve -var branch_name=${{ github.ref_name }} -var tmdb_api_key=${{ secrets.TMDB_API_KEY }} -var aws_region=${{ secrets.AWS_REGION }}
      working-directory: terraform
      env:
        TF_LOG: DEBUG

    - name: Delete EKS Cluster
      run: |
        CLUSTER_NAMES=$(aws eks list-clusters --query "clusters[?starts_with(@, 'group-3-eks-netflix-clone-dev')].{Name: @}" --output text)
        for CLUSTER_NAME in $CLUSTER_NAMES; do
          aws eks delete-cluster --name $CLUSTER_NAME || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECS Cluster
      run: |
        CLUSTER_NAMES=$(aws ecs list-clusters --query "clusterArns[?contains(@, 'group-3-ecs-cluster-netflix-clone-dev')]" --output text)
        for CLUSTER_NAME in $CLUSTER_NAMES; do
          aws ecs delete-cluster --cluster $CLUSTER_NAME || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete ECR Repositories
      run: |
        REPO_NAMES=$(aws ecr describe-repositories --query "repositories[?starts_with(repositoryName, 'group-3-ecr-netflix-clone-dev')].repositoryName" --output text)
        for REPO_NAME in $REPO_NAMES; do
          aws ecr delete-repository --repository-name $REPO_NAME --force || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Delete VPCs
      run: |
        VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=group-3-vpc-netflix-clone-dev-*" --query "Vpcs[].VpcId" --output text)
        for VPC_ID in $VPC_IDS; do
          aws ec2 delete-vpc --vpc-id $VPC_ID || true
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
